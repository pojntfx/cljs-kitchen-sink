{"version":3,"sources":["com/pojtinger/felicitas/cljs_kitchen_sink/core.cljs"],"mappings":";AAUA,GAAA,QAAAA,gCAAAC,0CAAAC,oDAAAC,sEAAAC,2EAAAC;AAAA;AAAA,AAAA,AAASC,sDAAK,AAACC,+BAAmB,wBAAA,xBAACC;;AAEnC,sDAAA,tDAAgCC;AAAhC,AACE,IAAMC,QAAM,gDAAA,hDAACC;AAAb,AACE,oYAAA,WAAAC,/YAACC,iCACA,6GAAA,2CAAA,qDAAA,2CAAA,xPAACC,qDAAUC,+PAAyBC;AADrC,AAEE,mCAAAJ,5BAACK,sBAAOP;GAFV,2CAAA,sEAAA;;AAIA,mHAAA,5GAACQ,wDAAcZ,uIAAM;AAAA,AAAA,maAAA,WAAAa,pVAAQC,6DAAQ,+CAAA,AAAAC,uBAAA,mFAAA,qDAAA,9MAACC,+DAAQZ;AAAzB,AAA+C,qEAAAS,9DAACI;GACxC,kBAAA,AAAAF,wBAAA,uWAAA,/WAAKX,2FAAO,+CAAA,AAAAW,uBAAA,mFAAA,qDAAA,9MAACC,+DAAQZ,wSAAuBc","names":["js/com","js/com.pojtinger","js/com.pojtinger.felicitas","js/com.pojtinger.felicitas.cljs-kitchen-sink","js/com.pojtinger.felicitas.cljs-kitchen-sink.core","js/com.pojtinger.felicitas.cljs-kitchen-sink.core.root","com.pojtinger.felicitas.cljs-kitchen-sink.core/root","reagent.dom.client/create-root","js/document.getElementById","com.pojtinger.felicitas.cljs-kitchen-sink.core/main","match","reagent.core.atom","p1__15554#","reitit.frontend.easy/start!","reitit.frontend.router","com.pojtinger.felicitas.cljs-kitchen-sink.routes/routes","reitit.coercion.spec/coercion","cljs.core/reset!","reagent.dom.client.render","p1__15555#","com.pojtinger.felicitas.cljs-kitchen-sink.components/wrapper","cljs.core/deref","cljs.core.get_in","reitit.frontend.easy.push_state","com.pojtinger.felicitas.cljs-kitchen-sink.pages/not-found"],"sourcesContent":["(ns com.pojtinger.felicitas.cljs-kitchen-sink.core\n  (:require [com.pojtinger.felicitas.cljs-kitchen-sink.components :refer [wrapper]]\n            [com.pojtinger.felicitas.cljs-kitchen-sink.pages :as pages]\n            [com.pojtinger.felicitas.cljs-kitchen-sink.routes :refer [routes]]\n            [reagent.core :as r]\n            [reagent.dom.client :as client]\n            [reitit.coercion.spec :as rss]\n            [reitit.frontend :as rf]\n            [reitit.frontend.easy :as rfe]))\n\n(defonce root (client/create-root (js/document.getElementById \"root\")))\n\n(defn ^:export ^:dev/after-load main []\n  (let [match (r/atom nil)]\n    (rfe/start!\n     (rf/router routes {:data {:coercion rss/coercion}})\n     #(reset! match %)\n     {:use-fragment true})\n    (client/render root [(fn [] [wrapper (get-in @match [:data :name]) #(rfe/push-state %)\n                                 (if @match [(get-in @match [:data :view])] [pages/not-found])])])))"]}